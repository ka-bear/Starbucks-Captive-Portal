.\" Man page generated from reStructuredText.
.
.TH "NODOGSPLASH" "1" "July 8, 2020" "5.0.0" "nodogsplash"
.SH NAME
nodogsplash \- nodogsplash Documentation
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.sp
Nodogspash is a high performance, small footprint Captive Portal,
offering by default a simple splash page restricted Internet connection, yet incorporates an API that allows the creation of sophisticated authentication applications.
.sp
It was derived originally from the codebase of the Wifi Guard Dog project.
.sp
Nodogsplash is released under the GNU General Public License.
.INDENT 0.0
.IP \(bu 2
Mailing List: \fI\%http://ml.ninux.org/mailman/listinfo/nodogsplash\fP
.IP \(bu 2
Original Homepage \fIdown\fP: \fI\%http://kokoro.ucsd.edu/nodogsplash\fP
.IP \(bu 2
Wifidog: \fI\%http://dev.wifidog.org/\fP
.IP \(bu 2
GNU GPL: \fI\%http://www.gnu.org/copyleft/gpl.html\fP
.UNINDENT
.sp
The following describes what Nodogsplash does, how to get it and run it, and
how to customize its behavior for your application.
.sp
Contents:
.SH OVERVIEW
.sp
\fBNodogspash\fP (NDS) is a high performance, small footprint Captive Portal, offering by default a simple splash page restricted Internet connection, yet incorporates an API that allows the creation of sophisticated authentication applications.
.sp
\fBIf you want to provide simple and immediate public access\fP to an Internet connection with users giving some acknowledgment of the service, Nodogsplash does this by default.
Customising the page seen by users is a simple matter of editing the simple default html splash page file.
.sp
\fBIf you want to enforce use of a set of preset usernames\fP and passwords with perhaps a limited connection time, the addition of a simple shell script is all that is required.
.sp
\fBIf you want a more sophisticated authentication system\fP providing a dynamic web interface you can do that too by providing your own web service written in a language such as php running on its own server.
.sp
\fBTaking this to the extreme\fP, if you want to link Nodogsplash to your own centralised Internet based authentication service with user account self generation and access charging, you can do that too, or anything in between.
.sp
All modern mobile devices, most desktop operating systems and most browsers now have a Captive Portal Detection process that automatically issues a port 80 request on connection to a network. Nodogsplash detects this and serves a \(aqsplash\(aq web page.
.sp
The splash page in its most basic form, contains a \fIContinue\fP button. When the user clicks on it, access to the Internet is granted subject to a preset time interval.
.sp
Nodogsplash does not currently support traffic control but is fully compatible with other stand alone systems such as Smart Queue Management (SQM).
.sp
\fBNodogsplash supports multiple means of authentication\fP:
.INDENT 0.0
.IP \(bu 2
Click the \fIContinue\fP button (default)
.IP \(bu 2
Call an external script that may accept username/password and set session durations per user.
.IP \(bu 2
Forwarding authentication to an external service
.UNINDENT
.SH INSTALLING NODOGSPLASH
.SS OpenWrt
.INDENT 0.0
.IP \(bu 2
Have a router working with OpenWrt. At the time of writing, Nodogsplash has been tested with OpenWrt 17.01.4/5 and 18.06.0
.UNINDENT
.INDENT 0.0
.INDENT 3.5
It may or may not work on older versions of OpenWrt or on other kinds of Linux\-based router firmware.
.UNINDENT
.UNINDENT
.INDENT 0.0
.IP \(bu 2
Make sure your router is basically working before you try to install  Nodogsplash. In particular, make sure your DHCP daemon is serving addresses on the interface that nodogsplash will manage.
.UNINDENT
.INDENT 0.0
.INDENT 3.5
The default is br\-lan but can be changed to any interface by editing the /etc/config/nodogsplash file.
.UNINDENT
.UNINDENT
.INDENT 0.0
.IP \(bu 2
To install Nodogsplash, you may use the OpenWrt Luci web interface or alternatively, ssh to your router and run the command:
.INDENT 2.0
.INDENT 3.5
\fBopkg update\fP
.UNINDENT
.UNINDENT
.sp
followed by
.INDENT 2.0
.INDENT 3.5
\fBopkg install nodogsplash\fP
.UNINDENT
.UNINDENT
.IP \(bu 2
Nodogsplash is enabled by default and will start automatically on reboot or can be started and stopped manually.
.IP \(bu 2
If the interface that you want Nodogsplash to manage is not br\-lan,
edit /etc/config/nodogsplash and set GatewayInterface.
.IP \(bu 2
To start Nodogsplash, run the following, or just reboot the router:
.INDENT 2.0
.INDENT 3.5
\fB/etc/init.d/nodogsplash start\fP
.UNINDENT
.UNINDENT
.IP \(bu 2
To test the installation, connect a client device to the interface on your router that is managed by Nodogsplash (for example, connect to the router\(aqs wireless lan).
.UNINDENT
.INDENT 0.0
.INDENT 3.5
Most client device operating systems and browsers support Captive Portal Detection (CPD) and the operating system or browser on that device will attempt to contact a pre defined port 80 web page.
.sp
CPD will trigger Nodogsplash to serve the default splash page where you can click or tap Continue to access the Internet.
.sp
See the Authentication section for details of setting up a proper authentication process.
.sp
If your client device does not display the splash page it most likely does not support CPD.
.sp
You should then manually trigger Nodogsplash by trying to access a port 80 web site (for example, google.com:80 is a good choice).
.UNINDENT
.UNINDENT
.INDENT 0.0
.IP \(bu 2
To stop Nodogsplash:
.INDENT 2.0
.INDENT 3.5
\fB/etc/init.d/nodogsplash stop\fP
.UNINDENT
.UNINDENT
.IP \(bu 2
To uninstall Nodogsplash:
.INDENT 2.0
.INDENT 3.5
\fBopkg remove nodogsplash\fP
.UNINDENT
.UNINDENT
.UNINDENT
.SS Debian
.sp
There isn\(aqt a package in the repository (yet). But we have support for a debian package.
.sp
Requirements beside debian tools are:
.INDENT 0.0
.IP \(bu 2
libmicrohttpd\-dev (>= 0.9.51) [avaiable in \fBstretch\fP]
.UNINDENT
.sp
But you can also compile libmicrohttpd on your own if you\(aqre still running jessie or older.
.sp
\fBsudo apt\-get install debhelper dpkg\-dev dh\-systemd libmicrohttpd\-dev\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
apt\-get install build\-essential debhelper devscripts hardening\-includes
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Run this command in the repository root folder to create the package:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
dpkg\-buildpackage
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The package will be created in the parent directory.
.sp
Use this command if you want to create an unsigned package:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
dpkg\-buildpackage \-b \-rfakeroot \-us \-uc
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
You will find the .deb packages in parent directory.
.SH HOW TO COMPILE NODOGSPLASH
.SS Linux/Unix
.sp
Install libmicrohttpd including the header files (often call \-dev package).
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
git clone https://github.com/nodogsplash/nodogsplash.git
cd nodogsplash
make
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
If you installed the libmicrohttpd to another location (e.g. /tmp/libmicrohttpd_install/)
replace path in the make call with
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
make CFLAGS="\-I/tmp/libmicrohttpd_install/include" LDFLAGS="\-L/tmp/libmicrohttpd_install/lib"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
After compiling you can call \fBmake install\fP to install nodogsplash to /usr/
.SS OpenWrt
.sp
To compile nodogsplash please use the package definition from the feeds package.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
git clone git://git.openwrt.org/trunk/openwrt.git
cd openwrt
\&./scripts/feeds update
\&./scripts/feeds install
\&./scripts/feeds install nodogsplash
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Select the appropriate "Target System" and "Target Profile" in the menuconfig menu and build the image.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
make defconfig
make menuconfig
make
.ft P
.fi
.UNINDENT
.UNINDENT
.SH FREQUENTLY ASKED QUESTIONS
.SS What\(aqs the difference between v0.9, v1, v2 and v3?
.sp
v0.9 and v1 are the same codebase with the same feature set.
If the documentation says something about v1, this is usually also valid
for v0.9.
.sp
v2 was developed before version v1 was released. In v2 the http code was replaced by libmicrohttpd and the template engine was rewritten. Many features became defunct because of this procedure.
.sp
v3 cleans up the source code and adds three major new features,
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.IP 1. 3
\fBFAS\fP, a forwarding authentication service. FAS supports development of "Credential Verification" running on any dynamic web serving platform, on the same device as Nodogsplash, on another device on the local network, or on an Internet hosted web server.
.IP 2. 3
\fBPreAuth\fP, an implementation of FAS running on the same device as Nodogsplash and using Nogogsplash\(aqs own web server to generate dynamic web pages. Any scripting language or even a compiled application program can be used. This has the advantage of not requiring the resources of a separate web server.
.IP 3. 3
\fBBinAuth\fP, enabling an external script to be called for simple username/password authentication as well as doing post authentication processing such as setting session durations. This is similar to the old binvoucher feature, but more flexible.
.UNINDENT
.UNINDENT
.UNINDENT
.sp
In addition, in v3, the ClientTimeout setting was split into PreauthIdleTimeout and AuthIdleTimeout and for the ClientForceTimeout setting, SessionTimeout is now used instead.
.SS Can I update from v0.9 to v1
.sp
Updating to v1.0.0 and v1.0.1, this is a very smooth update with full compatibility.
.sp
Updating to 1.0.2 requires iptables v1.4.21 or above.
.SS Can I update from v0.9/v1 to v2.0.0
.sp
You can, if:
.INDENT 0.0
.IP \(bu 2
You don\(aqt use BinVoucher
.IP \(bu 2
You have iptables v1.4.21 or above
.UNINDENT
.SS Can I update from v0.9/v1/v2 to v3.0.0
.sp
You can, if:
.INDENT 0.0
.IP \(bu 2
You don\(aqt use BinVoucher
.IP \(bu 2
You have iptables v1.4.21 or above
.IP \(bu 2
You use the new options contained in the version 3 configuration file
.UNINDENT
.SS I would like to use QoS or TrafficControl on OpenWrt
.sp
The original pre version 1 feature has been broken since OpenWrt 12.09 (Attitude Adjustment), because the IMQ (Intermediate queueing device) is no longer supported.
.INDENT 0.0
.INDENT 3.5
\fBPull Requests are welcome!\fP
.UNINDENT
.UNINDENT
.sp
However the OpenWrt package, SQM Scripts (Smart Queue Management), is fully compatible with Nodogsplash and if configured to operate on the Nodogsplash interface (br\-lan by default) will provide efficient IP connection based traffic control to ensure fair usage of available bandwidth.
.SS Is https capture supported?
.sp
\fBNo\fP\&. Because all connections would have a critical certificate failure.
.sp
HTTPS web sites are now more or less a standard and to maintain security and user confidence it is essential that captive portals \fBDO NOT\fP attempt to capture port 443.
.sp
\fBCaptive Portal Detection\fP (CPD) has evolved as an enhancement to the network manager component included with major Operating Systems (Linux, Android, iOS/macOS, Windows). Using a pre\-defined port 80 web page (depending on the vendor) the network manager will detect the presence of a captive portal hotspot and notify the user. In addition, most major browsers now support CPD.
.SH THE SPLASH PAGE
.sp
As you will see mentioned in the "How Nodogsplash (NDS) Works" section, an initial port 80 request is generated on a client device, either by the user manually browsing to an http web page, or, more usually, automatically by the client device\(aqs built in Captive Portal Detection (CPD).
.sp
This request is intercepted by NDS and an html Splash Page is served to the user of the client device to enable them to authenticate and obtain Internet access.
.sp
This Splash page can be one of the following:
.INDENT 0.0
.IP \(bu 2
\fBA Static Web Page served by NDS:\fP
.UNINDENT
.INDENT 0.0
.INDENT 3.5
A page generated from the basic splash.html file installed with NDS and includes Template Variables (as listed in the splash.html file). \fIThis is the default configuration of a fresh installation of NDS.\fP
.sp
A script or executable file can optionally be called by NDS for post authentication processing (see \fBBinAuth\fP).
.sp
An example of the use of BinAuth is to check the Username and Password entered by a user into an authentication form supplied by the splash page.
.UNINDENT
.UNINDENT
.INDENT 0.0
.IP \(bu 2
\fBA Dynamic Web Page served by NDS\fP
.UNINDENT
.INDENT 0.0
.INDENT 3.5
A script or executable file is called by NDS immediately (without serving splash.html). The called script or executable will generate html code for NDS to serve in place of splash.html. (see \fBPreAuth\fP).
.sp
This enables a dialogue with the client user, for dissemination of information, user response and authentication.
.sp
This is implemented using \fBFAS\fP, but \fIwithout the resource utilisation of a separate web server\fP, particularly useful for legacy devices with limited flash and RAM capacity.
.UNINDENT
.UNINDENT
.INDENT 0.0
.IP \(bu 2
\fBA Dynamic Web Page served by an independent web server\fP on the same device as NDS, on the same Local Area Network as NDS, or on External Web Hosting Services.
.sp
A script or executable file is called by NDS immediately (without serving splash.html). The called script or executable will generate html code to be served by an independent Web Server. (see FAS).
.UNINDENT
.INDENT 0.0
.INDENT 3.5
This not only enables a dialogue with the client user, for dissemination of information, user response and authentication but also full flexibility in design and implementation of the captive portal functionality from a self contained system through to, for example, a fully integrated multi site system with a common database.
.UNINDENT
.UNINDENT
.SH HOW NODOGSPLASH (NDS) WORKS
.sp
A wireless router, typically running OpenWrt or some other Linux distribution, has two or more interfaces; NDS manages one of them. This will typically be br\-lan, the bridge to both the wireless and wired LAN; or could be for example wlan0 if you wanted NDS to work just on the wireless interface.
.sp
\fBA simplified summary of operation is as follows\fP:
.INDENT 0.0
.INDENT 3.5
By default, NDS blocks everything, but intercepts port 80 requests.
.sp
An initial port 80 request will be generated on a client device, either by the user manually browsing to an http web page, or automatically by the client device\(aqs built in Captive Portal Detection (CPD).
.sp
As soon as this initial port 80 request is received, NDS will redirect the client to either its own splash page, or a splash page on a configured Forwarding Authentication Service (FAS).
.sp
The user of the client device will then be expected to complete some actions on the splash page, such as accepting terms of service, entering a username and password etc. (this will of course be on either the basic NDS splash.html or the page presented by the FAS, depending on the NDS configuration).
.sp
Once the user on the client device has successfully completed the splash page actions, the page then links directly, with a query string, to an NDS virtual http directory provided by NDS\(aqs built in web server.
.sp
For security, NDS expects to receive the same valid token it allocated when the client issued its initial port 80 request. If the token received is valid, NDS then "authenticates" the client device, allowing access to the Internet.
.sp
However if Binauth is enabled, NDS first calls the Binauth script, passing if required a username and password to that script.
.sp
If the binauth script returns positively (ie return code 0), NDS then "authenticates" the client device, allowing access to the Internet.
.sp
In FAS secure mode, it is the responsibility of the FAS to obtain the client token in a secure manner from NDS.
.sp
When FAS is disabled, the token is supplied to the basic splash.html page served by NDS and passed back in clear text in the query string along with any username and password required for Binauth.
.UNINDENT
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
FAS and Binauth can be enabled together.
This can give great flexibility with FAS providing authentication     and Binauth providing post authentication processing closely linked to  NDS.
.UNINDENT
.UNINDENT
.SS Packet filtering
.sp
Nodogsplash considers four kinds of packets coming into the router over the managed interface. Each packet is one of these kinds:
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.IP 1. 3
\fBBlocked\fP, if the MAC mechanism is block, and the source MAC address of the packet matches one listed in the BlockedMACList; or if the MAC mechanism is allow, and source MAC address of the packet does not match one listed in the AllowedMACList or the TrustedMACList. These packets are dropped.
.IP 2. 3
\fBTrusted\fP, if the source MAC address of the packet matches one listed in the TrustedMACList. By default, these packets are accepted and routed to all destination addresses and ports. If desired, this behavior can be customized by FirewallRuleSet trusted\-users and FirewallRuleSet trusted\-users\-to\-router lists in the nodogsplash.conf configuration file, or by the EmptyRuleSetPolicy trusted\-users EmptyRuleSetPolicy trusted\-users\-to\-router directives.
.IP 3. 3
\fBAuthenticated\fP, if the packet\(aqs IP and MAC source addresses have gone through the nodogsplash authentication process and has not yet expired. These packets are accepted and routed to a limited set of addresses and ports (see FirewallRuleSet authenticated\-users and FirewallRuleSet users\-to\-router in the nodogsplash.conf configuration file).
.IP 4. 3
\fBPreauthenticated\fP\&. Any other packet. These packets are accepted and routed to a limited set of addresses and ports (see FirewallRuleSet      preauthenticated\-users and FirewallRuleSet users\-to\-router in the nodogsplash.conf configuration file). Any other packet is dropped, except that a packet for destination port 80 at any address is redirected to port 2050 on the router, where nodogsplash\(aqs built in libhttpd\-based web server is listening. This begins the \(aqauthentication\(aq process. The server will serve a splash page back to the source IP address of the packet. The user clicking the appropriate link on the splash page will complete the process, causing future packets from this IP/MAC address to be marked as Authenticated until the inactive or forced timeout is reached, and its packets revert to being Preauthenticated.
.UNINDENT
.sp
Nodogsplash implements these actions by inserting rules in the router\(aqs iptables mangle PREROUTING chain to mark packets, and by inserting rules in the nat PREROUTING, filter INPUT and filter FORWARD chains which match on those marks.
.sp
Because it inserts its rules at the beginning of existing chains, nodogsplash should be insensitive to most typical existing firewall configurations.
.UNINDENT
.UNINDENT
.SS Traffic control
.sp
Data rate control on an IP connection basis can be achieved using Smart Queue Management (SQM) configured separately, with NDS being fully compatible.
.sp
It should be noted that while setup options and binauth do accept traffic/quota settings, these values currently have no effect and are reserved for future development.
.SH FORWARDING AUTHENTICATION SERVICE (FAS)
.SS Overview
.sp
Nodogsplash (NDS) supports external (to NDS) authentication service via simple configuration options.
.INDENT 0.0
.TP
.B These options are:
.INDENT 7.0
.IP 1. 3
\fBfasport\fP\&. This enables Forwarding Authentication Service (FAS). Redirection is changed from splash.html to a FAS. The value is the IP port number of the FAS.
.IP 2. 3
\fBfasremoteip\fP\&. If set, this is the remote ip address of the FAS, if not set it will take the value of the NDS gateway address.
.IP 3. 3
\fBfaspath\fP\&. This is the path to the login page on the FAS.
.IP 4. 3
\fBfas_secure_enable\fP\&. If set to "1", authaction and the client token are not revealed and it is the responsibility of the FAS to request the token from NDSCTL. If set to "0", the client token is sent to the FAS in clear text in the query string of the redirect along with authaction and redir.
.UNINDENT
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
FAS (and Preauth/FAS) enables pre authentication processing. NDS authentication is the process that NDS uses to allow a client device to access the Internet through the Firewall. In contrast, Forward Authentication is a process of "Credential Verification", after which FAS, if the verification process is successful, passes the client token to NDS for access to the Internet to be granted.
.UNINDENT
.UNINDENT
.SS Using FAS
.sp
\fBNote\fP:
All addresses (with the exception of fasremoteip) are relative to the \fIclient\fP device, even if the FAS is located remotely.
.sp
When FAS is enabled, NDS automatically configures access to the FAS service.
.sp
The FAS service must serve an http splash of its own to replace the NDS splash.html.
Typically, the FAS service will be written in PHP or any other language that can provide dynamic web content.
.sp
FAS can then provide an action form for the client, typically requesting login, or self account creation for login.
.sp
The FAS can be on the same device as NDS, on the same local area network as NDS, or on an Internet hosted web server.
.SS Security
.sp
\fBIf FAS Secure is enabled\fP (fas_secure_enabled = 1, the default), NDS will supply only the gateway name, the client IP address and the originally requested URL in the query string in the redirect to FAS.
.sp
For example:
.sp
\fIhttp://fasremoteip:fasport/faspath?gatewayname=[gatewayname]&clientip=[clientip]&redir=[requested\-url]\fP
.sp
It is the responsibility of FAS to obtain the unique client token allocated by NDS as well as constructing the return URL to NDS.
.sp
The return url will be constructed by FAS from predetermined knowledge of the configuration of NDS using gatewayname as an identifier.
.sp
The client\(aqs unique access token will be obtained from NDS by the FAS making a call to the ndsctl tool.
.sp
For example, the following command returns just the token:
.sp
\fIndsctl json $clientip | grep token | cut \-c 10\- | cut \-c \-8\fP
.sp
If the client successfully authenticates in the FAS, FAS will return the unique token to NDS to finally allow the client access to the Internet.
.sp
A Secure Internet based FAS is best implemented as a two stage process, first using a local FAS, that in turn accesses an https remote FAS using tools such as curl or wget.
.sp
\fBIf FAS Secure is disabled\fP (fas_secure_enabled = 0), NDS sends the token and other information to FAS as clear text.
.sp
For example:
.sp
\fIhttp://fasremoteip:fasport/faspath?authaction=http://gatewayaddress:gatewayport/nodogsplash_auth/?clientip=[clientip]&gatewayname=[gatewayname]&tok=[token]&redir=[requested_url]\fP
.sp
Clearly in this case, a knowledgeable user could bypass FAS, so running fas_secure_enabled = 1, the default, is recommended.
.sp
\fBPost FAS processing\fP\&.
.sp
Once the client has been authenticated by the FAS, NDS must then be informed to allow the client to have access to the Internet.
.sp
This is done by accessing NDS at a special virtual URL.
This is of the form:
\fIhttp://gatewayaddress:gatewayport/nodogsplash_auth/?tok=[token]&redir=[landing_page_url]\fP
.sp
This is most commonly done using an html form of method GET.
The parameter redir can be the client\(aqs originally requested URL sent by NDS, or more usefully, the URL of a suitable landing page.
.sp
However, be aware that many client CPD processes will \fBautomatically close\fP the landing page as soon as Internet access is detected.
.sp
\fBManual Access of NDS Virtual URL\fP
.sp
If the user of an already authenticated client device manually accesses the NDS Virtual URL, they will be redirected back to FAS with the "status" query string.
.sp
This will be of the form:
.sp
\fIhttp://fasremoteip:fasport/faspath?clientip=[clientip]&gatewayname=[gatewayname]&status=authenticated\fP
.sp
FAS should then serve a suitable error page informing the client user that they are already logged in.
.SS Running FAS on your Nodogsplash router
.sp
A FAS service will run quite well on uhttpd (the web server that serves Luci) on an OpenWrt supported device with 8MB flash and 32MB ram but shortage of ram may well be an issue if more than two or three clients log in at the same time.
.sp
For this reason a device with a minimum of 8MB flash and 64MB ram is recommended.
.sp
\fBRunning on uhttpd with PHP\fP:
.sp
Although port 80 is the default for uhttpd, it is reserved for Captive Portal Detection so cannot be used for FAS. uhttpd can however be configured to operate on more than one port. We will use port 2080 in this example.
.INDENT 0.0
.INDENT 3.5
Install the modules php7 and php7\-cgi on OpenWrt for a simple example. Further modules may be required depending on your requirements.
.UNINDENT
.UNINDENT
.sp
To enable FAS with php in uhttpd you must add the lines:
.INDENT 0.0
.INDENT 3.5
\fBlist listen_http    0.0.0.0:2080\fP
.sp
\fBlist interpreter ".php=/usr/bin/php\-cgi"\fP
.UNINDENT
.UNINDENT
.sp
to the /etc/config/uhttpd file in the config uhttpd \(aqmain\(aq or first section.
.sp
The two important NDS options to set will be:
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.IP 1. 3
fasport. We will use port 2080 for uhttpd
.IP 2. 3
faspath. Set to, for example, /myfas/fas.php,
your FAS files being placed in /www/myfas/
.UNINDENT
.UNINDENT
.UNINDENT
.sp
\fBNote 1\fP:
.INDENT 0.0
.INDENT 3.5
A typical Internet hosted Apache/PHP \fBshared\fP server will be set up to serve multiple domain names.
.sp
To access yours, use:
.INDENT 0.0
.INDENT 3.5
fasremoteip = the \fBip address\fP of the remote server
.sp
and, for example,
.sp
faspath = /domainname/pathto/myfas/fas.php
.sp
or
.sp
faspath = /accountname/pathto/myfas/fas.php
.UNINDENT
.UNINDENT
.sp
If necessary, contact your hosting service provider.
.UNINDENT
.UNINDENT
.sp
\fBNote 2:\fP
.INDENT 0.0
.INDENT 3.5
The configuration file /etc/config/nodogsplash contains the line "option enabled 1".
.sp
If you have done something wrong and locked yourself out, you can still SSH to your router and stop NoDogSplash (ndsctl stop) to fix the problem.
.UNINDENT
.UNINDENT
.SS Using the simple example files
.sp
Assuming you want to run the FAS example demo locally under uhttpd on the same OpenWrt device that is running NDS, configured as above, do the following.
.INDENT 0.0
.INDENT 3.5
(Under other operating systems you may need to edit the nodogsplash.conf file in /etc/nodogsplash instead, but the process is very similar.)
.UNINDENT
.UNINDENT
.sp
First you should obtain the demo files by downloading the Nodogsplash zip file from
.INDENT 0.0
.INDENT 3.5
\fI\%https://github.com/nodogsplash/nodogsplash/\fP
.UNINDENT
.UNINDENT
.sp
Then extract the php files from the folder
.INDENT 0.0
.INDENT 3.5
"forward_authentication_service/nodog/"
.UNINDENT
.UNINDENT
.sp
\fBOpenWrt and uhttpd:\fP
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
Create a folder /www/nodog/
.IP \(bu 2
Place the files fas.php, landing.php, css.php, querycheck.php, tos.php, users.dat in /www/nodog/
.IP \(bu 2
Edit the file /etc/config/nodogsplash
.UNINDENT
.INDENT 0.0
.INDENT 3.5
adding the lines:
.INDENT 0.0
.INDENT 3.5
\fBoption fasport \(aq2080\(aq\fP
.sp
\fBoption faspath \(aq/nodog/fas.php\(aq\fP
.sp
\fBoption fas_secure_enabled \(aq0\(aq\fP
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.IP \(bu 2
Restart uhttpd using the command "service uhttpd restart".
.IP \(bu 2
Restart NDS using the command "service nodogsplash restart".
.UNINDENT
.UNINDENT
.UNINDENT
.SH PREAUTH OPTION
.SS Overview
.sp
\fBPreAuth\fP is a pre\-authentication process that enables NDS to directly serve dynamic web content generated by a script or executable program.
.sp
This is implemented using \fBFAS\fP, but \fIwithout the resource utilisation of a separate web server\fP, particularly useful for legacy devices with limited flash and RAM capacity.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
From version 3.3.1 onwards, a PreAuth login script is preinstalled. This generates a page asking for username and email address. Logins are recorded in a log file. It is enabled by uncommenting just 3 lines in the config file.
.UNINDENT
.UNINDENT
.sp
\fBPreAuth is enabled\fP by configuring NDS FAS to point to a virtual URL in the NDS web root instead of an independent FAS server. In addition, NDS is configured with the location of the PreAuth script or program.
.sp
\fBThe PreAuth script\fP can be a shell script or any other script type that an interpreter is available for (for example, PHP\-cli, Python etc.).
.sp
A PreAuth program could be, for example, a compiled program written in C or any other language that has a compiler available for the platform.
.sp
The PreAuth script or program will parse the url encoded command line (query string) passed to it and output html depending on the contents of the query string it receives from NDS. In turn, NDS will serve this html to the client device that is attempting to access the Internet.
.SS Using PreAuth
.sp
PreAuth is set up using the standard NDS configuration for FAS
(See the \fBForwarding Authentication Service (FAS)\fP section of this documentation).
.sp
In addition a single PreAuth configuration option is required to inform NDS of the location of the PreAuth script or program.
.INDENT 0.0
.TP
.B In summary, the following configuration options should be set:
.INDENT 7.0
.IP 1. 3
\fBfasport\fP\&. This enables FAS and \fImust\fP be set to the same value as the gateway port.
.IP 2. 3
\fBfaspath\fP\&. This \fImust\fP be set to the PreAuth virtual url, "/nodogsplash_preauth/" by default.
.UNINDENT
.UNINDENT
.sp
The remaining FAS configuration options must be left unset at the default values.
.INDENT 0.0
.TP
.B ie:
.INDENT 7.0
.IP 1. 3
\fBfasremoteip\fP\&. Not set (defaults to the gateway ip address).
.IP 2. 3
\fBfas_secure_enable\fP\&. Not set (defaults to enabled).
.UNINDENT
.UNINDENT
.sp
\fBFinally\fP the Preauth configuration must be set.
In OpenWrt this will be of the form
option preauth /etc/nodogsplash/demo\-preauth.sh
For other Linux distributions this is set in the nodogsplash.conf file.
.SS Using The Example PreAuth Script
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
From version 3.1.1 onwards, the example PreAuth script is preinstalled.
.UNINDENT
.UNINDENT
.sp
\fBEnabling the Preinstalled Script\fP
.sp
On Openwrt, edit the following lines in the /etc/config/nodogsplash file:
.INDENT 0.0
.INDENT 3.5
\fI#option fasport \(aq2050\(aq\fP
.sp
\fI#option faspath \(aq/nodogsplash_preauth/\(aq\fP
.sp
\fI#option preauth \(aq/usr/lib/nodogsplash/login.sh\(aq\fP
.UNINDENT
.UNINDENT
.sp
To read:
.INDENT 0.0
.INDENT 3.5
\fIoption fasport \(aq2050\(aq\fP
.sp
\fIoption faspath \(aq/nodogsplash_preauth/\(aq\fP
.sp
\fIoption preauth \(aq/usr/lib/nodogsplash/login.sh\(aq\fP
.UNINDENT
.UNINDENT
.sp
For other operating systems edit the equivalent lines in the /etc/nodogsplash/nodogsplash.conf file
.sp
After making the change, save the file and restart the router.
.sp
\fBThis example shell script\fP generates html output for NDS to serve as a dynamic splash page.
.sp
The example asks the client user to enter their name and email address.
On entering this information the client user then clicks or taps "Continue".
.sp
The script then generates html code to send to NDS to serve a second "Thankyou" page and creates a log entry ( /tmp/ndslog.log ), recording the client authentication details.
.sp
On tapping "Continue" for the second time, the client user is given access to the Internet.
.sp
This is a simple example of a script to demonstrate how to use PreAuth as a built in FAS. The script could of course ask for any response from the client and conduct its own authentication procedures \- entirely at the discretion of the person setting up their own captive portal functionality.
.SS Writing A Preauth Script
.sp
A Preauth script can be written as a shell script or any other language that the system has an interpreter for. It could also be a complied program.
.sp
NDS calls the preauth script with a command line equivalent to an html query string but with ", " (comma space) in place of "&" (ampersand).
.sp
Full details are included in the example script demo\-preauth.sh available by downloading the Nodogsplash zip file from
.INDENT 0.0
.INDENT 3.5
\fIhttps://github.com/nodogsplash/nodogsplash/\fP
.UNINDENT
.UNINDENT
.sp
and extracting from the folder
.INDENT 0.0
.INDENT 3.5
"forward_authentication_service/PreAuth/"
.UNINDENT
.UNINDENT
.SS Defining and Using Variables
.sp
The query string is sent to us from NDS in a urlencoded form, so we must decode it here so we can parse it. In a shell script we would use the code:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
query=$(printf "${query_enc//%/\e\ex}")
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
In the example script we want to ask the client user for their username and email address.
.sp
We could ask for anything we like and add our own variables to the html forms we generate.
.sp
If we want to show a sequence of forms or information pages we can do this easily.
.sp
To return to the script and show additional pages, the form action must be set to:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
<form action=\e"/nodogsplash_preauth/\e" method=\e"get\e">
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Note: In a shell script, quotes ( " ) must be escaped with the
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
"\e"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
character.
.sp
Any variables we need to preserve and pass back to ourselves or NDS must be added to the form as hidden:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
<input type=\e"hidden\e" name=......
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Such variables will appear in the query string when NDS re\-calls this script.
.sp
We can then parse for them again.
.sp
When the logic of this script decides we should allow the client to access the Internet we inform NDS with a final page displaying a continue button with the form action set to:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
"<form action=\e"/nodogsplash_auth/\e" method=\e"get\e">"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
We must also send NDS the client token as a hidden variable, but first we must obtain the token from ndsctl using a suitable command such as:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tok="$(ndsctl json $clientip | grep token | cut \-c 10\- | cut \-c \-8)"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
In a similar manner we can obtain any client or NDS information that ndsctl provides.
.sp
The query string NDS sends to us will always be of the following form (with a "comma space" separator):
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
?clientip=[clientipaddress], gatewayname=[gatewayname],  redir=[originalurl], var4=[data], var5=[data], var6......
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The first three variables will be clientip, gatewayname and redir
.sp
We have chosen to name redir as $requested here as it is actually the originally requested url.
.sp
There is one exception to this. If the client presses "back" on their browser NDS detects this and tells us by returning status=authenticated instead of redir=[originalurl]
.sp
If we detect this we show a page telling the client they are already logged in.
.sp
Additional variables returned by NDS will be those we define here and send to NDS via an html form method=get
.sp
See the example script which uses $username and $emailaddr
.sp
There is no limit to the number of variables we can define dynamically as long as the query string does not exceed 2048 bytes.
.sp
The query string will be truncated if it does exceed this length.
.SH BINAUTH OPTION
.sp
\fBKey: BinAuth\fP
.sp
\fBValue: /path/to/executable/script\fP
.sp
Authenticate a client using an external program that get passed the (optional) username and password value.
The exit code and output values of the program decide if and how a client is to be authenticated.
.sp
The program will also be called on client authentication and deauthentication.
.sp
For the following examples, \fIbinauth\fP is set to \fI/etc/nds_auth.sh\fP in nodogsplash.conf:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
#!/bin/sh

METHOD="$1"
MAC="$2"

case "$METHOD" in
  auth_client)
    USERNAME="$3"
    PASSWORD="$4"
    if [ "$USERNAME" = "Bill" \-a "$PASSWORD" = "tms" ]; then
      # Allow client to access the Internet for one hour (3600 seconds)
      # Further values are upload and download limits in bytes. 0 for no limit.
      echo 3600 0 0
      exit 0
    else
      # Deny client to access the Internet.
      exit 1
    fi
    ;;
  client_auth|client_deauth|idle_deauth|timeout_deauth|ndsctl_auth|ndsctl_deauth|shutdown_deauth)
    INGOING_BYTES="$3"
    OUTGOING_BYTES="$4"
    SESSION_START="$5"
    SESSION_END="$6"
    # client_auth: Client authenticated via this script.
    # client_deauth: Client deauthenticated by the client via splash page.
    # idle_deauth: Client was deauthenticated because of inactivity.
    # timeout_deauth: Client was deauthenticated because the session timed out.
    # ndsctl_auth: Client was authenticated by the ndsctl tool.
    # ndsctl_deauth: Client was deauthenticated by the ndsctl tool.
    # shutdown_deauth: Client was deauthenticated by Nodogsplash terminating.
    ;;
esac
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The \fISESSION_START\fP and \fISESSION_END\fP values are the number of seconds since 1970 or may be 0 for unknown/unlimited.
.sp
The splash.html page contains the following code:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
<form method=\(aqGET\(aq action=\(aq$authaction\(aq>
<input type=\(aqhidden\(aq name=\(aqtok\(aq value=\(aq$tok\(aq>
<input type=\(aqhidden\(aq name=\(aqredir\(aq value=\(aq$redir\(aq>
username: <input type=\(aqtext\(aq name=\(aqusername\(aq value=\(aq\(aq size=\(aq12\(aq maxlength=\(aq12\(aq>
<br>
password: <input type=\(aqpassword\(aq name=\(aqpassword\(aq value=\(aq\(aq size=\(aq12\(aq maxlength=\(aq10\(aq>
<br>
<input type=\(aqsubmit\(aq value=\(aqEnter\(aq>
</form>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
If a client enters a username \(aqBill\(aq and password \(aqtms\(aq, then the configured \fIbinauth\fP script is executed:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
/etc/nds_auth.sh auth_client 12:34:56:78:90 \(aqBill\(aq \(aqtms\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
For the authentication to be successful, the exit code of the script must be 0. The output can be up to three values. First the number of seconds the client is to be authenticated, second and third the maximum number of upload and download bytes limits. Values not given to NDS will resort to default values. Note that the traffic shaping feature that uses the upload/download values does not work right now.
.sp
After initial authentication by the script, Nodogsplash will immediately acknowlege by calling the binauth script again with:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
/etc/nds_auth.sh client_auth 12:34:56:78:90 <incoming_bytes> <outgoing_bytes> <session_start> <session_end>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Nodogsplash will also call the script when the client is authenticated and deauthenticated in general.
.SH TRAFFIC CONTROL
.SS Overview
.sp
Nodogsplash (NDS) supports Traffic Control (Bandwidth Limiting) using the SQM \- Smart Queue Management (sqm\-scripts) package, available for OpenWrt and generic Linux.
.sp
\fI\%https://github.com/tohojo/sqm\-scripts\fP
.sp
SQM does efficient bandwidth control, independently for both upload and download, on an IP connection basis. This ideal for enforcing a fair usage policy on a typical Captive Portal implementation.
.sp
In addition the Queue management SQM provides, results in significantly improved WiFi performance, particularly on the modern low cost WiFi routers available on the market today.
.sp
Finally, SQM controls quality of service (QOS), allowing priority for real time protocols such a VOIP.
.sp
Overall, SQM can enhance significantly the experience of clients using your Captive Portal, whilst ensuring a single client is unlikely to dominate the available Internet service at the expense of others.
.SS Installing SQM
.sp
The generic Linux scripts can be downloaded from the link above.
.sp
\fBOn OpenWrt\fP, SQM can be installed from the LuCi interface or by the following CLI commands on your router:
.sp
\fIopkg update\fP
.sp
\fIopkg install sqm\-scripts\fP
.sp
\fBNote\fP:
The standard and default SQM installation expects monitoring of the interface connecting to the WAN. What we need is for SQM to monitor the interface NDS is bound to. This of course will be a LAN interface.
The default configuration will limit bandwidth from the WAN connection to services on the Internet. Our configuration will limit client bandwidth TO NDS, thus enabling a true fair usage policy.
.sp
\fITo prevent confusion\fP it is important to understand that SQM defines "Upload" as traffic "Out" of the interface SQM is monitoring and "Download" as traffic "In" to the SQM interface.
.sp
In the default SQM configuration, Upload will mean what is normally accepted, ie traffic to the Internet and Download will mean traffic from the Internet.
.sp
\fBIn our case however the terms will be reversed!\fP
.sp
The default SQM configuration file on OpenWrt is:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
config queue
    option enabled \(aq0\(aq
    option interface \(aqeth1\(aq
    option download \(aq85000\(aq
    option upload \(aq10000\(aq
    option qdisc \(aqfq_codel\(aq
    option script \(aqsimple.qos\(aq
    option qdisc_advanced \(aq0
    option ingress_ecn \(aqECN\(aq
    option egress_ecn \(aqECN\(aq
    option qdisc_really_really_advanced \(aq0\(aq
    option itarget \(aqauto\(aq
    option etarget \(aqauto\(aq
    option linklayer \(aqnone\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
For simple rate limiting, we are interested in setting the desired interface and the download/upload rates.
.sp
We may also want to optimize for the type of Internet feed and change the qdisc.
.sp
A typical Internet feed could range from a high speed fiber optic connection through fast VDSL to a fairly poor ADSL connection and configured rates should be carefully chosen when setting up your Captive Portal.
.sp
A typical Captive Portal however will be providing free Internet access to customers and guests at a business or venue, using their mobile devices.
.sp
A good compromise for a business or venue might be a download rate from the Internet of ~3000 Kb/s and an upload rate to the Internet of ~1000 Kb/s will be adequate, allowing for example, a client to stream a YouTube video, yet have minimal effect on other clients browsing the Internet or downloading their emails. Obviously the values for upload and download rates for best overall performance depend on many factors and are best determined by trial and error.
.sp
If we assume we have NDS bound to interface br\-lan and we have a VDSL connection, a good working setup for SQM will be as follows:
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
\fIRate to\fP Internet 1000 Kb/s (but note this is from the perspective of the interface SQM is monitoring, so this means DOWNLOAD from the client).
.IP \(bu 2
\fIRate from\fP Internet 3000 Kb/s (also note this is from the perspective of the interface SQM is monitoring, so is means UPLOAD to the client).
.IP \(bu 2
\fIVDSL\fP connection (usually an ethernet like connection)
.IP \(bu 2
\fINDS\fP bound to br\-lan
.UNINDENT
.UNINDENT
.UNINDENT
.sp
We will configure this by issuing the following commands:
.sp
\fINote the reversed "upload" and "download" values.\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
uci set sqm.@queue[0].interface=\(aqbr\-lan\(aq

uci set sqm.@queue[0].download=\(aq1000\(aq

uci set sqm.@queue[0].upload=\(aq3000\(aq

uci set sqm.@queue[0].linklayer=\(aqethernet\(aq

uci set sqm.@queue[0].overhead=\(aq22\(aq

uci set sqm.@queue[0].qdisc=\(aqcake\(aq

uci set sqm.@queue[0].script=\(aqpiece_of_cake.qos\(aq

uci set sqm.@queue[0].enabled=\(aq1\(aq

uci commit sqm

service sqm restart
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Replace the linklayer and overhead values to match your Internet feed.
.sp
The following table lists LinkLayer types and Overhead for common feed types:
.INDENT 0.0
.INDENT 3.5
.TS
center;
|l|l|l|.
_
T{
Connection Type
T}	T{
LinkLayer
T}	T{
Overhead
T}
_
T{
Fibre/Cable
T}	T{
Ethernet
T}	T{
18
T}
_
T{
VDSL2
T}	T{
Ethernet
T}	T{
22
T}
_
T{
Ethernet
T}	T{
Ethernet
T}	T{
38
T}
_
T{
ADSL/DSL
T}	T{
ATM
T}	T{
44
T}
_
.TE
.UNINDENT
.UNINDENT
.sp
Some broadband providers use variations on the values shown here, contacting them for details sometimes helps but often the request will be "off script" for a typical helpdesk. These table values should give good results regardless. Trial and error and the use of a good speed tester is often the only way forward.
A good speed tester web site is \fI\%http://dslreports.com/speedtest\fP
.sp
Further details about SQM can be found at the following links:
.sp
\fI\%https://openwrt.org/docs/guide\-user/network/traffic\-shaping/sqm\fP
.sp
\fI\%https://openwrt.org/docs/guide\-user/network/traffic\-shaping/sqm\-details\fP
.SH USING NDSCTL
.sp
A nodogsplash install includes ndsctl, a separate application which provides some control over a running nodogsplash process by communicating with it over a unix socket. Some command line options:
.INDENT 0.0
.IP \(bu 2
To print to stdout some information about your nodogsplash process:
.INDENT 2.0
.INDENT 3.5
\fB/usr/bin/ndsctl status\fP
.UNINDENT
.UNINDENT
.IP \(bu 2
To print to stdout the list of clients in human readable format:
.INDENT 2.0
.INDENT 3.5
\fB/usr/bin/ndsctl clients\fP
.UNINDENT
.UNINDENT
.IP \(bu 2
To print to stdout the list of clients in json format:
.INDENT 2.0
.INDENT 3.5
\fB/usr/bin/ndsctl json\fP
.UNINDENT
.UNINDENT
.IP \(bu 2
To print to stdout the details of a particular client in json format (This is particularly useful if called from a FAS or Binauth script.):
.INDENT 2.0
.INDENT 3.5
\fB/usr/bin/ndsctl json [mac|ip|token]\fP
.UNINDENT
.UNINDENT
.IP \(bu 2
To block a MAC address, when the MAC mechanism is block:
.INDENT 2.0
.INDENT 3.5
\fB/usr/bin/ndsctl block MAC\fP
.UNINDENT
.UNINDENT
.IP \(bu 2
To unblock a MAC address, when the MAC mechanism is block:
.INDENT 2.0
.INDENT 3.5
\fB/usr/bin/ndsctl unblock MAC\fP
.UNINDENT
.UNINDENT
.IP \(bu 2
To allow a MAC address, when the MAC mechanism is allow:
.INDENT 2.0
.INDENT 3.5
\fB/usr/bin/ndsctl allow MAC\fP
.UNINDENT
.UNINDENT
.IP \(bu 2
To unallow a MAC address, when the MAC mechanism is allow:
.INDENT 2.0
.INDENT 3.5
\fB/usr/bin/ndsctl unallow MAC\fP
.UNINDENT
.UNINDENT
.IP \(bu 2
To deauthenticate a currently authenticated user given their IP or MAC
address:
.INDENT 2.0
.INDENT 3.5
\fB/usr/bin/ndsctl deauth IP|MAC\fP
.UNINDENT
.UNINDENT
.IP \(bu 2
To set the verbosity of logged messages to n:
.INDENT 2.0
.INDENT 3.5
\fB/usr/bin/ndsctl loglevel n\fP
.UNINDENT
.UNINDENT
.UNINDENT
.sp
For more options, run ndsctl \-h. (Note that if you want the effect of ndsctl commands to to persist across nodogsplash restarts, you have to edit the configuration file.)
.SH CUSTOMISING NODOGSPLASH
.sp
After initial installation, Nogogsplash (NDS) should be working in its most basic mode and client Captive Portal Detection (CPD) should pop up the default splash page.
.sp
Before attempting to customise NDS you should ensure it is working in this basic mode before you start.
.sp
NDS reads its configuration file when it starts up but the location of this file varies depending on the operating system.
.sp
As NDS is a package that requires hardware configured as an IP router, perhaps the most common installation is using OpenWrt. However NDS can be compiled to run on most Linux distributions, the most common being Debian or one of its popular variants (eg Raspbian).
.sp
If NDS is working in the default, post installation mode, then you will have met the NDS dependencies and can now move on to your own customisation.
.SS The Configuration File
.sp
In OpenWrt, or operating systems supporting UCI (such as LEDE) the configuration is kept in the file:
.INDENT 0.0
.INDENT 3.5
\fB/etc/config/nodogsplash\fP
.UNINDENT
.UNINDENT
.sp
In other operating systems the configuration is kept in the file:
.INDENT 0.0
.INDENT 3.5
\fB/etc/nodogsplash/nodogsplash.conf\fP
.UNINDENT
.UNINDENT
.sp
Both of these files contain a full list of options and can be edited directly. A restart of NDS is required for any changes to take effect.
.sp
In the case of OpenWrt though, once you are confident in your configuration requirements you can use UCI to read and set any of the configuration options using simple commands, making this very convenient if making changes from scripts, such as those you may write to use with Binauth and FAS.
.sp
For example, to list the full configuration, at the command line type:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
uci show nodogsplash
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
To display the Gateway Name, type:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
uci get nodogsplash.@nodogsplash[0].gatewayname
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
To set the Gateway Name to a new value, type:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
uci set nodogsplash.@nodogsplash[0].gatewayname=\(aqmy new gateway\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
To add a new firewall rule allowing access to another service running on port 8888 on the router, type:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
uci add_list nodogsplash.@nodogsplash[0].users_to_router=\(aqallow
tcp port 8888\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Finally you must tell UCI to commit your changes to the configuration file:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
uci commit nodogsplash
.ft P
.fi
.UNINDENT
.UNINDENT
.SS The Splash Page
.sp
The default simple splash page can be found at:
.INDENT 0.0
.INDENT 3.5
\fB/etc/nodogsplash/htdocs/splash.html\fP
.UNINDENT
.UNINDENT
.sp
When the splash page is served, the following variables in the page are
replaced by their values:
.INDENT 0.0
.IP \(bu 2
\fI$gatewayname\fP The value of GatewayName as set in nodogsplash.conf.
.IP \(bu 2
\fI$authtarget\fP A URL which encodes a unique token and the URL of the user\(aqs   original web request. If nodogsplash receives a request at this URL, it completes the authentication process for the client and replies to the request with a "302 Found" to the encoded originally requested URL.
.sp
It should be noted however that, depending on vendor, the client\(aqs built in CPD may not respond to simple html links.
.UNINDENT
.INDENT 0.0
.INDENT 3.5
An href link example that my prove to be problematical:
.INDENT 0.0
.INDENT 3.5
\fB<a href="$authtarget">Enter</a>\fP
.UNINDENT
.UNINDENT
.sp
(You should instead use a GET\-method HTML form to send this   information to the nodogsplash server; see below.)
.UNINDENT
.UNINDENT
.INDENT 0.0
.IP \(bu 2
\fI$imagesdir\fP The directory in nodogsplash\(aqs web hierarchy where images to be displayed in the splash page must be located.
.IP \(bu 2
\fI$tok\fP, \fI$redir\fP, \fI$authaction\fP, and \fI$denyaction\fP are available and should be used to write the splash page to use a GET\-method HTML form instead of using $authtarget as the value of an href attribute to communicate with the nodogsplash server.
.UNINDENT
.INDENT 0.0
.INDENT 3.5
\fI$authaction\fP and \fI$denyaction\fP are virtual urls used to inform NDS that a client should be authenticated or deauthenticated and are of the form:
.sp
\fIhttp://gatewayaddress:gatewayport/nodogsplash_auth/\fP
.sp
and
.sp
\fIhttp://gatewayaddress:gatewayport/nodogsplash_deny/\fP
.sp
A simple example of a GET\-method form:
.UNINDENT
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
<form method=\(aqGET\(aq action=\(aq$authaction\(aq>
  <input type=\(aqhidden\(aq name=\(aqtok\(aq value=\(aq$tok\(aq>
  <input type=\(aqhidden\(aq name=\(aqredir\(aq value=\(aq$redir\(aq>
  <input type=\(aqsubmit\(aq value=\(aqClick Here to Enter\(aq>
</form>
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 0.0
.IP \(bu 2
\fI$clientip\fP, \fI$clientmac\fP and \fI$gatewaymac\fP The respective addresses
of the client or gateway. This might be useful in cases where the data
needs to be forwarded to some other place by the splash page itself.
.IP \(bu 2
\fI$nclients\fP and \fI$maxclients\fP User stats. Useful when you need to
display something like "n of m users online" on the splash site.
.IP \(bu 2
\fI$uptime\fP The time Nodogsplash has been running.
.UNINDENT
.INDENT 0.0
.INDENT 3.5
A list of all available variables are included in the splash.html file.
.sp
If the user accesses the virtual url \fI$authaction\fP when already authenticated, a status page is shown:
.sp
\fB/etc/nodogsplash/htdocs/status.html\fP
.sp
In the status.html file, the same variables as in the splash.html site can be used.
.UNINDENT
.UNINDENT
.sp
It should be noted when designing a custom splash page that for security reasons many client device CPD implementations:
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
Immediately close the browser when the client has authenticated.
.IP \(bu 2
Prohibit the use of href links.
.IP \(bu 2
Prohibit downloading of external files (including .css and .js, even if they are allowed in NDS firewall settings).
.IP \(bu 2
Prohibit the execution of javascript.
.UNINDENT
.UNINDENT
.UNINDENT
.sp
Also, note that any images you reference should reside in the subdirectory that is defined by \fI$imagesdir\fP (default: "images").
.SH DEBUGGING NODOGSPLASH
.INDENT 0.0
.INDENT 3.5
To see maximally verbose debugging output from nodogsplash, set log level to 7. This can be done in the UCI configuration file on OpenWrt adding the line:
.INDENT 0.0
.INDENT 3.5
\fBoption debuglevel \(aq7\(aq\fP
.UNINDENT
.UNINDENT
.sp
or by editing the file
.INDENT 0.0
.INDENT 3.5
\fB/etc/init.d/nodogsplash\fP
.UNINDENT
.UNINDENT
.sp
and setting the OPTIONS variable to the flags "\-s \-d 7".
.sp
Restart or reboot, and view messages with logread. Debug messages are logged to syslog.
.sp
The default level of logging is 5, LOG_NOTICE, and is more appropriate for routine use.
.sp
Logging level can also be set using ndsctl.
.sp
When stopped, nodogsplash deletes its iptables rules, attempting to leave the router\(aqs firewall in its original state. If not (for example, if nodogsplash crashes instead of exiting cleanly) subsequently starting and stopping nodogsplash should remove its rules.
.sp
On OpenWrt, restarting the firewall will overwrite Nodogsplash\(aqs iptables rules, so when the firewall is restarted it will automatically restart Nodogsplash if it is running.
.sp
Nodogsplash operates by marking packets. Many packages, such as mwan3 and SQM scripts, also mark packets.
.sp
By default, Nodogsplash marks its packets in such a way that conficts are unlikely to occur but the masks used by Nodogsplash can be changed if necessary in the configuration file.
.sp
Potential conflicts may be investigated by looking at your overall iptables setup. To list all the rules in all the chains, run
.INDENT 0.0
.INDENT 3.5
\fBiptables \-L\fP
.UNINDENT
.UNINDENT
.sp
For extensive suggestions on debugging iptables, see for example, Oskar Andreasson\(aqs tutorial at:
.sp
\fI\%https://www.frozentux.net/iptables\-tutorial/iptables\-tutorial.html\fP
.UNINDENT
.UNINDENT
.SH TODO LIST
.sp
Not all features are finished or working as properly or as efficiently as they should.
Here is a list of things that need to be improved:
.INDENT 0.0
.IP \(bu 2
While (un\-) block/trust/allow via the ndsctl tool take effect, the state object of the client in NDS is not affected.
Both systems still need to be connected (in src/auth.c).
.IP \(bu 2
Include blocked and trusted clients in the client list \- so that they can be managed.
.IP \(bu 2
Extend Status processing to display a page when a user\(aqs authentication is rejected, e.g. because the user exceeded a quota or is blocked etc.
.IP \(bu 2
Implement Traffic control on a user by user basis. This functionality was originally available but has been broken for many years.
.IP \(bu 2
The code in src/http_microhttpd.c has evolved from previous versions and possibly has some missed edge cases. It would benefit from a rewrite to improve maintainability as well as performance.
.IP \(bu 2
ip version 6 is not currently supported by NDS. It is not essential or advantageous to have in the short term but should be added at some time in the future.
.UNINDENT
.INDENT 0.0
.IP \(bu 2
genindex
.IP \(bu 2
search
.UNINDENT
.SH AUTHOR
The Nodogsplash Contributors
.SH COPYRIGHT
2016 - 2019, The Nodogsplash Contributors
.\" Generated by docutils manpage writer.
.
